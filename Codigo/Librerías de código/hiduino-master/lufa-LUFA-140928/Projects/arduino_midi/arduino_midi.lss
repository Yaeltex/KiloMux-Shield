
arduino_midi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001d  00800100  00800100  00000f3c  2**0
                  ALLOC
  2 .debug_aranges 000002f0  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000093d  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004ea8  00000000  00000000  00001b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000012f0  00000000  00000000  00006a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00004050  00000000  00000000  00007d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000460  00000000  00000000  0000bd54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002430  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000257d  00000000  00000000  0000e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000378  00000000  00000000  00010b61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
///////////////////////////////////////////////////////////////////////////////
// MIDI Utility Functions
///////////////////////////////////////////////////////////////////////////////

MidiMessageType getStatus(MidiMessageType inType, uint8_t inChannel) 
{
   0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   2:	00 00       	nop
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
   4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   6:	00 00       	nop
   8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
   a:	00 00       	nop
   c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
   e:	00 00       	nop
  10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
  12:	00 00       	nop
  14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
  16:	00 00       	nop
  18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
  22:	00 00       	nop
  24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
  26:	00 00       	nop
  28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	29 c5       	rjmp	.+2642   	; 0xa80 <__vector_11>
  2e:	00 00       	nop
  30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
  32:	00 00       	nop
  34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
  36:	00 00       	nop
  38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
  3e:	00 00       	nop
  40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
  42:	00 00       	nop
  44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
  46:	00 00       	nop
  48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
  4e:	00 00       	nop
  50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
  56:	00 00       	nop
  58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__vector_23>
  5e:	00 00       	nop
  60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
  62:	00 00       	nop
  64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
  66:	00 00       	nop
  68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
  6e:	00 00       	nop
  70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
  72:	00 00       	nop
  74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
  76:	00 00       	nop
  78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
  7e:	00 00       	nop
  80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
  82:	00 00       	nop
  84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
  86:	00 00       	nop
  88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
  8e:	00 00       	nop
  90:	69 c0       	rjmp	.+210    	; 0x164 <__bad_interrupt>
  92:	00 00       	nop
  94:	67 c0       	rjmp	.+206    	; 0x164 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 00 00 00 08 eb 03 48 20 01 00 01 02     ..........H ....
  a8:	00 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 65 00 02 01 00 c0 32 09 04 00 00 00 01 01     ..e.....2.......
  ba:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
  ca:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
  da:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
  ea:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
  fa:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
 10a:	05 25 01 01 03                                      .%...

0000010f <LanguageString>:
 10f:	04 03 09 04                                         ....

00000113 <ManufacturerString>:
 113:	10 03 59 00 41 00 45 00 4c 00 54 00 45 00 58 00     ..Y.A.E.L.T.E.X.
 123:	00 00                                               ..

00000125 <ProductString>:
 125:	06 03 4d 00 34 00 00 00 00                          ..M.4....

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d2 e0       	ldi	r29, 0x02	; 2
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e8 ec       	ldi	r30, 0xC8	; 200
 142:	fe e0       	ldi	r31, 0x0E	; 14
 144:	02 c0       	rjmp	.+4      	; 0x14a <.do_copy_data_start>

00000146 <.do_copy_data_loop>:
 146:	05 90       	lpm	r0, Z+
 148:	0d 92       	st	X+, r0

0000014a <.do_copy_data_start>:
 14a:	a0 30       	cpi	r26, 0x00	; 0
 14c:	b1 07       	cpc	r27, r17
 14e:	d9 f7       	brne	.-10     	; 0x146 <.do_copy_data_loop>

00000150 <__do_clear_bss>:
 150:	11 e0       	ldi	r17, 0x01	; 1
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b1 e0       	ldi	r27, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
 158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
 15a:	ad 31       	cpi	r26, 0x1D	; 29
 15c:	b1 07       	cpc	r27, r17
 15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
 160:	00 d2       	rcall	.+1024   	; 0x562 <main>
 162:	b0 c6       	rjmp	.+3424   	; 0xec4 <_exit>

00000164 <__bad_interrupt>:
 164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	80 6a       	ori	r24, 0xA0	; 160
 16c:	8b b9       	out	0x0b, r24	; 11
// Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs.
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 16e:	08 95       	ret

00000170 <EVENT_USB_Device_Disconnect>:
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
// the status LEDs, disables the sample update and PWM output timers and stops the USB and MIDI management tasks.
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 178:	08 95       	ret

0000017a <getTypeFromStatusByte>:
    return ((uint8_t)inType | ((inChannel - 1) & 0x0f));
}

MidiMessageType getTypeFromStatusByte(uint8_t inStatus)
{
    if ((inStatus  < 0x80) ||
 17a:	87 ff       	sbrs	r24, 7
 17c:	0c c0       	rjmp	.+24     	; 0x196 <getTypeFromStatusByte+0x1c>
 17e:	84 3f       	cpi	r24, 0xF4	; 244
 180:	51 f0       	breq	.+20     	; 0x196 <getTypeFromStatusByte+0x1c>
 182:	85 3f       	cpi	r24, 0xF5	; 245
 184:	41 f0       	breq	.+16     	; 0x196 <getTypeFromStatusByte+0x1c>
 186:	89 3f       	cpi	r24, 0xF9	; 249
 188:	31 f0       	breq	.+12     	; 0x196 <getTypeFromStatusByte+0x1c>
 18a:	8d 3f       	cpi	r24, 0xFD	; 253
 18c:	21 f0       	breq	.+8      	; 0x196 <getTypeFromStatusByte+0x1c>
    {
        // Data bytes and undefined.
        return InvalidType;
    }

    if (inStatus < 0xf0)
 18e:	80 3f       	cpi	r24, 0xF0	; 240
 190:	18 f4       	brcc	.+6      	; 0x198 <getTypeFromStatusByte+0x1e>
    {
        // Channel message, remove channel nibble.
        return (inStatus & 0xf0);
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	08 95       	ret
 196:	80 e0       	ldi	r24, 0x00	; 0
    }

    return inStatus;
}
 198:	08 95       	ret

0000019a <isChannelMessage>:
{
	return (inStatus & 0x0f) + 1;
}

bool isChannelMessage(uint8_t inType)
{
 19a:	28 2f       	mov	r18, r24
    return (inType == NoteOff           ||
 19c:	80 38       	cpi	r24, 0x80	; 128
 19e:	89 f0       	breq	.+34     	; 0x1c2 <isChannelMessage+0x28>
 1a0:	80 39       	cpi	r24, 0x90	; 144
 1a2:	79 f0       	breq	.+30     	; 0x1c2 <isChannelMessage+0x28>
 1a4:	80 3b       	cpi	r24, 0xB0	; 176
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <isChannelMessage+0x28>
 1a8:	80 3a       	cpi	r24, 0xA0	; 160
 1aa:	59 f0       	breq	.+22     	; 0x1c2 <isChannelMessage+0x28>
 1ac:	80 3d       	cpi	r24, 0xD0	; 208
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <isChannelMessage+0x28>
 1b0:	80 3e       	cpi	r24, 0xE0	; 224
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <isChannelMessage+0x28>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	20 3c       	cpi	r18, 0xC0	; 192
 1ba:	29 f4       	brne	.+10     	; 0x1c6 <isChannelMessage+0x2c>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
            inType == ProgramChange);
}
 1c6:	08 95       	ret

000001c8 <__vector_23>:

}

// Parse via Arduino/Serial
ISR(USART1_RX_vect, ISR_BLOCK) 
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 1ee:	80 91 14 01 	lds	r24, 0x0114
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <__vector_23+0x30>
 1f6:	e5 c0       	rjmp	.+458    	; 0x3c2 <__stack+0xc3>

	const uint8_t extracted = UDR1;
 1f8:	10 91 ce 00 	lds	r17, 0x00CE

	// Borrowed + Modified from Francois Best's Arduino MIDI Library
	// https://github.com/FortySevenEffects/arduino_midi_library
    if (mPendingMessageIndex == 0)
 1fc:	40 91 0b 01 	lds	r20, 0x010B
 200:	44 23       	and	r20, r20
 202:	09 f0       	breq	.+2      	; 0x206 <__vector_23+0x3e>
 204:	7c c0       	rjmp	.+248    	; 0x2fe <__vector_23+0x136>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
 206:	10 93 0d 01 	sts	0x010D, r17

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
 20a:	00 91 0a 01 	lds	r16, 0x010A
 20e:	80 2f       	mov	r24, r16
 210:	b4 df       	rcall	.-152    	; 0x17a <getTypeFromStatusByte>
 212:	c3 df       	rcall	.-122    	; 0x19a <isChannelMessage>
 214:	88 23       	and	r24, r24
 216:	49 f0       	breq	.+18     	; 0x22a <__vector_23+0x62>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it to the pending message
            if (extracted < 0x80)
 218:	17 fd       	sbrc	r17, 7
 21a:	07 c0       	rjmp	.+14     	; 0x22a <__vector_23+0x62>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
 21c:	00 93 0d 01 	sts	0x010D, r16
                mPendingMessage[1]   = extracted;
 220:	10 93 0e 01 	sts	0x010E, r17
                mPendingMessageIndex = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 0b 01 	sts	0x010B, r24
            }
            // Else we received another status byte, so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
 22a:	10 91 0d 01 	lds	r17, 0x010D
 22e:	81 2f       	mov	r24, r17
 230:	a4 df       	rcall	.-184    	; 0x17a <getTypeFromStatusByte>
 232:	48 2f       	mov	r20, r24
 234:	81 3f       	cpi	r24, 0xF1	; 241
 236:	b1 f1       	breq	.+108    	; 0x2a4 <__vector_23+0xdc>
 238:	82 3f       	cpi	r24, 0xF2	; 242
 23a:	90 f4       	brcc	.+36     	; 0x260 <__vector_23+0x98>
 23c:	80 3b       	cpi	r24, 0xB0	; 176
 23e:	a1 f1       	breq	.+104    	; 0x2a8 <__vector_23+0xe0>
 240:	81 3b       	cpi	r24, 0xB1	; 177
 242:	38 f4       	brcc	.+14     	; 0x252 <__vector_23+0x8a>
 244:	80 39       	cpi	r24, 0x90	; 144
 246:	81 f1       	breq	.+96     	; 0x2a8 <__vector_23+0xe0>
 248:	80 3a       	cpi	r24, 0xA0	; 160
 24a:	71 f1       	breq	.+92     	; 0x2a8 <__vector_23+0xe0>
 24c:	80 38       	cpi	r24, 0x80	; 128
 24e:	79 f5       	brne	.+94     	; 0x2ae <__vector_23+0xe6>
 250:	2b c0       	rjmp	.+86     	; 0x2a8 <__vector_23+0xe0>
 252:	80 3d       	cpi	r24, 0xD0	; 208
 254:	39 f1       	breq	.+78     	; 0x2a4 <__vector_23+0xdc>
 256:	80 3e       	cpi	r24, 0xE0	; 224
 258:	39 f1       	breq	.+78     	; 0x2a8 <__vector_23+0xe0>
 25a:	80 3c       	cpi	r24, 0xC0	; 192
 25c:	41 f5       	brne	.+80     	; 0x2ae <__vector_23+0xe6>
 25e:	22 c0       	rjmp	.+68     	; 0x2a4 <__vector_23+0xdc>
 260:	88 3f       	cpi	r24, 0xF8	; 248
 262:	79 f0       	breq	.+30     	; 0x282 <__vector_23+0xba>
 264:	89 3f       	cpi	r24, 0xF9	; 249
 266:	38 f4       	brcc	.+14     	; 0x276 <__vector_23+0xae>
 268:	83 3f       	cpi	r24, 0xF3	; 243
 26a:	e1 f0       	breq	.+56     	; 0x2a4 <__vector_23+0xdc>
 26c:	83 3f       	cpi	r24, 0xF3	; 243
 26e:	e0 f0       	brcs	.+56     	; 0x2a8 <__vector_23+0xe0>
 270:	86 3f       	cpi	r24, 0xF6	; 246
 272:	e9 f4       	brne	.+58     	; 0x2ae <__vector_23+0xe6>
 274:	06 c0       	rjmp	.+12     	; 0x282 <__vector_23+0xba>
 276:	8a 3f       	cpi	r24, 0xFA	; 250
 278:	d0 f0       	brcs	.+52     	; 0x2ae <__vector_23+0xe6>
 27a:	8d 3f       	cpi	r24, 0xFD	; 253
 27c:	10 f0       	brcs	.+4      	; 0x282 <__vector_23+0xba>
 27e:	8e 3f       	cpi	r24, 0xFE	; 254
 280:	b0 f0       	brcs	.+44     	; 0x2ae <__vector_23+0xe6>
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
            	mCompleteMessage.Event 	 = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	80 93 04 01 	sts	0x0104, r24
                mCompleteMessage.Data1   = mPendingMessage[0];
 288:	10 93 05 01 	sts	0x0105, r17
                mCompleteMessage.Data2   = 0;
 28c:	10 92 06 01 	sts	0x0106, r1
                mCompleteMessage.Data3   = 0;
 290:	10 92 07 01 	sts	0x0107, r1
                mPendingMessageValid  	 = true;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 08 01 	sts	0x0108, r24

                // We still need to reset these
                mPendingMessageIndex = 0;
 29a:	10 92 0b 01 	sts	0x010B, r1
                mPendingMessageExpectedLength = 0;
 29e:	10 92 09 01 	sts	0x0109, r1
 2a2:	8f c0       	rjmp	.+286    	; 0x3c2 <__stack+0xc3>
            // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLength = 2;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <__vector_23+0xe2>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLength = 3;
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	80 93 09 01 	sts	0x0109, r24
            default:
                // Something bad happened
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 2ae:	50 91 0b 01 	lds	r21, 0x010B
 2b2:	60 91 09 01 	lds	r22, 0x0109
 2b6:	25 2f       	mov	r18, r21
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	86 2f       	mov	r24, r22
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	28 17       	cp	r18, r24
 2c2:	39 07       	cpc	r19, r25
 2c4:	c4 f0       	brlt	.+48     	; 0x2f6 <__vector_23+0x12e>
        {
            // Reception complete
            mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 2c6:	42 95       	swap	r20
 2c8:	4f 70       	andi	r20, 0x0F	; 15
 2ca:	40 93 04 01 	sts	0x0104, r20
            mCompleteMessage.Data1 = mPendingMessage[0]; // status = channel + type
 2ce:	10 93 05 01 	sts	0x0105, r17
 			mCompleteMessage.Data2 = mPendingMessage[1];
 2d2:	80 91 0e 01 	lds	r24, 0x010E
 2d6:	80 93 06 01 	sts	0x0106, r24

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 2da:	63 30       	cpi	r22, 0x03	; 3
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <__vector_23+0x120>
                mCompleteMessage.Data3 = mPendingMessage[2];
 2de:	80 91 0f 01 	lds	r24, 0x010F
 2e2:	80 93 07 01 	sts	0x0107, r24
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__vector_23+0x124>
            else
                mCompleteMessage.Data3 = 0;
 2e8:	10 92 07 01 	sts	0x0107, r1

            mPendingMessageIndex = 0;
 2ec:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 2f0:	10 92 09 01 	sts	0x0109, r1
 2f4:	1b c0       	rjmp	.+54     	; 0x32c <__stack+0x2d>
            return;
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
 2f6:	5f 5f       	subi	r21, 0xFF	; 255
 2f8:	50 93 0b 01 	sts	0x010B, r21
 2fc:	62 c0       	rjmp	.+196    	; 0x3c2 <__stack+0xc3>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
 2fe:	17 ff       	sbrs	r17, 7
 300:	19 c0       	rjmp	.+50     	; 0x334 <__stack+0x35>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
 302:	1d 3f       	cpi	r17, 0xFD	; 253
 304:	28 f4       	brcc	.+10     	; 0x310 <__stack+0x11>
 306:	1a 3f       	cpi	r17, 0xFA	; 250
 308:	28 f4       	brcc	.+10     	; 0x314 <__stack+0x15>
 30a:	18 3f       	cpi	r17, 0xF8	; 248
 30c:	99 f4       	brne	.+38     	; 0x334 <__stack+0x35>
 30e:	02 c0       	rjmp	.+4      	; 0x314 <__stack+0x15>
 310:	1e 3f       	cpi	r17, 0xFE	; 254
 312:	80 f0       	brcs	.+32     	; 0x334 <__stack+0x35>
                    // pass it to the structure for being read outside
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.
           		 	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(extracted));
 314:	81 2f       	mov	r24, r17
 316:	31 df       	rcall	.-414    	; 0x17a <getTypeFromStatusByte>
 318:	82 95       	swap	r24
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	80 93 04 01 	sts	0x0104, r24
            		mCompleteMessage.Data1 = extracted;
 320:	10 93 05 01 	sts	0x0105, r17
                    mCompleteMessage.Data2 = 0;
 324:	10 92 06 01 	sts	0x0106, r1
                    mCompleteMessage.Data3 = 0;
 328:	10 92 07 01 	sts	0x0107, r1
                   	mPendingMessageValid   = true;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 08 01 	sts	0x0108, r24
 332:	47 c0       	rjmp	.+142    	; 0x3c2 <__stack+0xc3>
                    break;
            }
        }

        // Add extracted data byte to pending message
        mPendingMessage[mPendingMessageIndex] = extracted;
 334:	24 2f       	mov	r18, r20
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	e3 5f       	subi	r30, 0xF3	; 243
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	10 83       	st	Z, r17

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLength - 1))
 340:	00 91 09 01 	lds	r16, 0x0109
 344:	80 2f       	mov	r24, r16
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	28 17       	cp	r18, r24
 34c:	39 07       	cpc	r19, r25
 34e:	b4 f1       	brlt	.+108    	; 0x3bc <__stack+0xbd>
        {

        	mCompleteMessage.Event = MIDI_EVENT(0, getTypeFromStatusByte(mPendingMessage[0]));
 350:	10 91 0d 01 	lds	r17, 0x010D
 354:	81 2f       	mov	r24, r17
 356:	11 df       	rcall	.-478    	; 0x17a <getTypeFromStatusByte>
 358:	98 2f       	mov	r25, r24
 35a:	82 95       	swap	r24
 35c:	8f 70       	andi	r24, 0x0F	; 15
 35e:	80 93 04 01 	sts	0x0104, r24
            mCompleteMessage.Data1 = mPendingMessage[0];
 362:	10 93 05 01 	sts	0x0105, r17
            mCompleteMessage.Data2 = mPendingMessage[1];
 366:	80 91 0e 01 	lds	r24, 0x010E
 36a:	80 93 06 01 	sts	0x0106, r24

            // Save Data3 only if applicable
            if (mPendingMessageExpectedLength == 3)
 36e:	03 30       	cpi	r16, 0x03	; 3
 370:	29 f4       	brne	.+10     	; 0x37c <__stack+0x7d>
                mCompleteMessage.Data3 = mPendingMessage[2];
 372:	80 91 0f 01 	lds	r24, 0x010F
 376:	80 93 07 01 	sts	0x0107, r24
 37a:	02 c0       	rjmp	.+4      	; 0x380 <__stack+0x81>
            else
                mCompleteMessage.Data3 = 0;
 37c:	10 92 07 01 	sts	0x0107, r1

            // Reset local variables
            mPendingMessageIndex = 0;
 380:	10 92 0b 01 	sts	0x010B, r1
            mPendingMessageExpectedLength = 0;
 384:	10 92 09 01 	sts	0x0109, r1
            mPendingMessageValid = true;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 08 01 	sts	0x0108, r24

            // Activate running status (if enabled for the received type)
            switch (getTypeFromStatusByte(mPendingMessage[0]))
 38e:	90 3b       	cpi	r25, 0xB0	; 176
 390:	79 f0       	breq	.+30     	; 0x3b0 <__stack+0xb1>
 392:	91 3b       	cpi	r25, 0xB1	; 177
 394:	38 f4       	brcc	.+14     	; 0x3a4 <__stack+0xa5>
 396:	90 39       	cpi	r25, 0x90	; 144
 398:	59 f0       	breq	.+22     	; 0x3b0 <__stack+0xb1>
 39a:	90 3a       	cpi	r25, 0xA0	; 160
 39c:	49 f0       	breq	.+18     	; 0x3b0 <__stack+0xb1>
 39e:	90 38       	cpi	r25, 0x80	; 128
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <__stack+0xb7>
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <__stack+0xb1>
 3a4:	90 3d       	cpi	r25, 0xD0	; 208
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <__stack+0xb1>
 3a8:	90 3e       	cpi	r25, 0xE0	; 224
 3aa:	11 f0       	breq	.+4      	; 0x3b0 <__stack+0xb1>
 3ac:	90 3c       	cpi	r25, 0xC0	; 192
 3ae:	19 f4       	brne	.+6      	; 0x3b6 <__stack+0xb7>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
 3b0:	10 93 0a 01 	sts	0x010A, r17
 3b4:	06 c0       	rjmp	.+12     	; 0x3c2 <__stack+0xc3>
                    break;

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
 3b6:	10 92 0a 01 	sts	0x010A, r1
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <__stack+0xc3>
            return;
        }
        else
        {
            // Not complete? Then update the index of the pending message.
            mPendingMessageIndex++;
 3bc:	4f 5f       	subi	r20, 0xFF	; 255
 3be:	40 93 0b 01 	sts	0x010B, r20
        }
    }
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <MIDI_To_Arduino>:

}

// From USB/Host to Arduino/Serial
void MIDI_To_Arduino(void)
{
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <MIDI_To_Arduino+0x6>
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <MIDI_To_Arduino+0x8>
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 3f4:	80 91 14 01 	lds	r24, 0x0114
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	99 f5       	brne	.+102    	; 0x462 <MIDI_To_Arduino+0x7a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 402:	80 91 e8 00 	lds	r24, 0x00E8

	// Select the MIDI OUT stream
	Endpoint_SelectEndpoint(MIDI_STREAM_OUT_EPADDR);

	/* Check if a MIDI command has been received */
	if (Endpoint_IsOUTReceived())
 406:	82 ff       	sbrs	r24, 2
 408:	2c c0       	rjmp	.+88     	; 0x462 <MIDI_To_Arduino+0x7a>
	{
		MIDI_EventPacket_t MIDIEvent;

		/* Read the MIDI event packet from the endpoint */
		Endpoint_Read_Stream_LE(&MIDIEvent, sizeof(MIDIEvent), NULL);
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	64 e0       	ldi	r22, 0x04	; 4
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	bd d1       	rcall	.+890    	; 0x792 <Endpoint_Read_Stream_LE>

		// Passthrough to Arduino
		Serial_SendByte(MIDIEvent.Data1);
 418:	9a 81       	ldd	r25, Y+2	; 0x02
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 41a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 41e:	85 ff       	sbrs	r24, 5
 420:	fc cf       	rjmp	.-8      	; 0x41a <MIDI_To_Arduino+0x32>
				UDR1 = DataByte;
 422:	90 93 ce 00 	sts	0x00CE, r25
		Serial_SendByte(MIDIEvent.Data2); 
 426:	9b 81       	ldd	r25, Y+3	; 0x03
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 428:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 42c:	85 ff       	sbrs	r24, 5
 42e:	fc cf       	rjmp	.-8      	; 0x428 <MIDI_To_Arduino+0x40>
				UDR1 = DataByte;
 430:	90 93 ce 00 	sts	0x00CE, r25
		Serial_SendByte(MIDIEvent.Data3); 
 434:	9c 81       	ldd	r25, Y+4	; 0x04
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
 436:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
 43a:	85 ff       	sbrs	r24, 5
 43c:	fc cf       	rjmp	.-8      	; 0x436 <MIDI_To_Arduino+0x4e>
				UDR1 = DataByte;
 43e:	90 93 ce 00 	sts	0x00CE, r25
				PORTD |= LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 442:	5c 98       	cbi	0x0b, 4	; 11

		LEDs_TurnOffLEDs(LEDS_LED1);
		rx_ticks = TICK_COUNT;
 444:	88 e8       	ldi	r24, 0x88	; 136
 446:	93 e1       	ldi	r25, 0x13	; 19
 448:	90 93 03 01 	sts	0x0103, r25
 44c:	80 93 02 01 	sts	0x0102, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 450:	80 91 f2 00 	lds	r24, 0x00F2

		/* If the endpoint is now empty, clear the bank */
		if (!(Endpoint_BytesInEndpoint()))
 454:	88 23       	and	r24, r24
 456:	29 f4       	brne	.+10     	; 0x462 <MIDI_To_Arduino+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 458:	80 91 e8 00 	lds	r24, 0x00E8
 45c:	8b 77       	andi	r24, 0x7B	; 123
 45e:	80 93 e8 00 	sts	0x00E8, r24
			/* Clear the endpoint ready for new packet */
			Endpoint_ClearOUT();
		}
	}

}
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	cf 91       	pop	r28
 46c:	df 91       	pop	r29
 46e:	08 95       	ret

00000470 <MIDI_To_Host>:

// From Arduino/Serial to USB/Host 
void MIDI_To_Host(void)
{
	// Device must be connected and configured for the task to run
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
 470:	80 91 14 01 	lds	r24, 0x0114
 474:	84 30       	cpi	r24, 0x04	; 4
 476:	41 f5       	brne	.+80     	; 0x4c8 <MIDI_To_Host+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 47e:	80 91 e8 00 	lds	r24, 0x00E8

	// Select the MIDI IN stream
	Endpoint_SelectEndpoint(MIDI_STREAM_IN_EPADDR);

	if (Endpoint_IsINReady())
 482:	80 ff       	sbrs	r24, 0
 484:	21 c0       	rjmp	.+66     	; 0x4c8 <MIDI_To_Host+0x58>
	{
		if (mPendingMessageValid == true)
 486:	80 91 08 01 	lds	r24, 0x0108
 48a:	88 23       	and	r24, r24
 48c:	e9 f0       	breq	.+58     	; 0x4c8 <MIDI_To_Host+0x58>
		{
			mPendingMessageValid = false;
 48e:	10 92 08 01 	sts	0x0108, r1

			// Write the MIDI event packet to the endpoint
			Endpoint_Write_Stream_LE(&mCompleteMessage, sizeof(mCompleteMessage), NULL);
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	64 e0       	ldi	r22, 0x04	; 4
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	cb d1       	rcall	.+918    	; 0x836 <Endpoint_Write_Stream_LE>

			// Clear out complete message
			memset(&mCompleteMessage, 0, sizeof(mCompleteMessage)); 
 4a0:	10 92 04 01 	sts	0x0104, r1
 4a4:	10 92 05 01 	sts	0x0105, r1
 4a8:	10 92 06 01 	sts	0x0106, r1
 4ac:	10 92 07 01 	sts	0x0107, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4b0:	80 91 e8 00 	lds	r24, 0x00E8
 4b4:	8e 77       	andi	r24, 0x7E	; 126
 4b6:	80 93 e8 00 	sts	0x00E8, r24
 4ba:	5d 98       	cbi	0x0b, 5	; 11

			// Send the data in the endpoint to the host
			Endpoint_ClearIN();

			LEDs_TurnOffLEDs(LEDS_LED2);
			tx_ticks = TICK_COUNT; 
 4bc:	88 e8       	ldi	r24, 0x88	; 136
 4be:	93 e1       	ldi	r25, 0x13	; 19
 4c0:	90 93 01 01 	sts	0x0101, r25
 4c4:	80 93 00 01 	sts	0x0100, r24
 4c8:	08 95       	ret

000004ca <EVENT_USB_Device_ConfigurationChanged>:
}

// Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
// of the USB device after enumeration - the device endpoints are configured and the MIDI management task started.
void EVENT_USB_Device_ConfigurationChanged(void)
{
 4ca:	0f 93       	push	r16
 4cc:	1f 93       	push	r17
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	61 e8       	ldi	r22, 0x81	; 129
 4d2:	42 e3       	ldi	r20, 0x32	; 50
 4d4:	02 d2       	rcall	.+1028   	; 0x8da <Endpoint_ConfigureEndpoint_Prv>
 4d6:	08 2f       	mov	r16, r24
	/* Setup MIDI Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	60 e8       	ldi	r22, 0x80	; 128
 4dc:	42 e3       	ldi	r20, 0x32	; 50
 4de:	fd d1       	rcall	.+1018   	; 0x8da <Endpoint_ConfigureEndpoint_Prv>
 4e0:	10 e0       	ldi	r17, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	08 23       	and	r16, r24
 4e6:	19 23       	and	r17, r25
 4e8:	00 ff       	sbrs	r16, 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <EVENT_USB_Device_ConfigurationChanged+0x26>
 4ec:	90 e6       	ldi	r25, 0x60	; 96
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <EVENT_USB_Device_ConfigurationChanged+0x28>
 4f0:	90 e9       	ldi	r25, 0x90	; 144
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 4f2:	8b b1       	in	r24, 0x0b	; 11
 4f4:	8f 70       	andi	r24, 0x0F	; 15
 4f6:	98 2b       	or	r25, r24
 4f8:	9b b9       	out	0x0b, r25	; 11
}
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <SetupHardware>:

void SetupHardware(void)
{

	// Disable watchdog if enabled by bootloader/fuses
	MCUSR &= ~(1 << WDRF);
 500:	84 b7       	in	r24, 0x34	; 52
 502:	87 7f       	andi	r24, 0xF7	; 247
 504:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 506:	28 e1       	ldi	r18, 0x18	; 24
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	20 93 60 00 	sts	0x0060, r18
 510:	10 92 60 00 	sts	0x0060, r1
 514:	0f be       	out	0x3f, r0	; 63
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 516:	8f e1       	ldi	r24, 0x1F	; 31
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	90 93 cd 00 	sts	0x00CD, r25
 51e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 528:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 52c:	e9 ec       	ldi	r30, 0xC9	; 201
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	20 83       	st	Z, r18

				DDRD  |= (1 << 3);
 532:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 534:	5a 9a       	sbi	0x0b, 2	; 11

	Serial_Init(31250, false);

	// Start the flush timer so that overflows occur rapidly to
	// push received bytes to the USB interface
	TCCR0B = (1 << CS02);
 536:	84 e0       	ldi	r24, 0x04	; 4
 538:	85 bd       	out	0x25, r24	; 37
			
	// Serial Interrupts
	UCSR1B = 0;
 53a:	10 82       	st	Z, r1
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 53c:	88 e9       	ldi	r24, 0x98	; 152
 53e:	80 83       	st	Z, r24

	// https://github.com/ddiakopoulos/hiduino/issues/13
	/* Target /ERASE line is active HIGH: there is a mosfet that inverts logic */
	// These are defined in the makefile... 
	AVR_ERASE_LINE_PORT |= AVR_ERASE_LINE_MASK;
 540:	46 9a       	sbi	0x08, 6	; 8
	AVR_ERASE_LINE_DDR |= AVR_ERASE_LINE_MASK; 
 542:	3e 9a       	sbi	0x07, 6	; 7

	// Disable clock division
	//clock_prescale_set(clock_div_1);
	CLKPR = (1 << CLKPCE);
 544:	e1 e6       	ldi	r30, 0x61	; 97
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 e8       	ldi	r24, 0x80	; 128
 54a:	80 83       	st	Z, r24
    CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 54c:	10 82       	st	Z, r1

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 54e:	8a b1       	in	r24, 0x0a	; 10
 550:	80 6f       	ori	r24, 0xF0	; 240
 552:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 554:	8b b1       	in	r24, 0x0b	; 11
 556:	8f 70       	andi	r24, 0x0F	; 15
 558:	8b b9       	out	0x0b, r24	; 11

	LEDs_Init();
	USB_Init();
 55a:	83 d2       	rcall	.+1286   	; 0xa62 <USB_Init>
				PORTD |= LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 55c:	5c 98       	cbi	0x0b, 4	; 11

	LEDs_TurnOffLEDs(LEDS_LED1);
	LEDs_TurnOffLEDs(LEDS_LED2);
}
 55e:	5d 98       	cbi	0x0b, 5	; 11
 560:	08 95       	ret

00000562 <main>:
uint16_t rx_ticks = 0; 
const uint16_t TICK_COUNT = 5000; 

int main(void)
{
	SetupHardware();
 562:	ce df       	rcall	.-100    	; 0x500 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 564:	78 94       	sei

	GlobalInterruptEnable();

	sei();
 566:	78 94       	sei

	for (;;)
	{
		if (tx_ticks > 0) 
 568:	80 91 00 01 	lds	r24, 0x0100
 56c:	90 91 01 01 	lds	r25, 0x0101
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	31 f0       	breq	.+12     	; 0x580 <main+0x1e>
		{
			tx_ticks--;
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	90 93 01 01 	sts	0x0101, r25
 57a:	80 93 00 01 	sts	0x0100, r24
 57e:	01 c0       	rjmp	.+2      	; 0x582 <main+0x20>
				PORTD &= ~LEDS_ALL_LEDS;
			}

			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 580:	5d 9a       	sbi	0x0b, 5	; 11
		else if (tx_ticks == 0)
		{
			LEDs_TurnOnLEDs(LEDS_LED2); // on = off?
		}
									
		if (rx_ticks > 0)
 582:	80 91 02 01 	lds	r24, 0x0102
 586:	90 91 03 01 	lds	r25, 0x0103
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	31 f0       	breq	.+12     	; 0x59a <main+0x38>
		{
			rx_ticks--;
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	90 93 03 01 	sts	0x0103, r25
 594:	80 93 02 01 	sts	0x0102, r24
 598:	01 c0       	rjmp	.+2      	; 0x59c <main+0x3a>
 59a:	5c 9a       	sbi	0x0b, 4	; 11
		else if (rx_ticks == 0)
		{
			LEDs_TurnOnLEDs(LEDS_LED1); // on = off? 
		}
			
		MIDI_To_Arduino();
 59c:	25 df       	rcall	.-438    	; 0x3e8 <MIDI_To_Arduino>
		MIDI_To_Host();
 59e:	68 df       	rcall	.-304    	; 0x470 <MIDI_To_Host>

		USB_USBTask();
 5a0:	7c d4       	rcall	.+2296   	; 0xe9a <USB_USBTask>
 5a2:	e2 cf       	rjmp	.-60     	; 0x568 <main+0x6>

000005a4 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 5a4:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 5a6:	92 30       	cpi	r25, 0x02	; 2
 5a8:	49 f0       	breq	.+18     	; 0x5bc <CALLBACK_USB_GetDescriptor+0x18>
 5aa:	93 30       	cpi	r25, 0x03	; 3
 5ac:	61 f0       	breq	.+24     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x22>
 5ae:	91 30       	cpi	r25, 0x01	; 1
 5b0:	f9 f4       	brne	.+62     	; 0x5f0 <CALLBACK_USB_GetDescriptor+0x4c>
 5b2:	e8 e9       	ldi	r30, 0x98	; 152
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	22 e1       	ldi	r18, 0x12	; 18
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	1e c0       	rjmp	.+60     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x54>
 5bc:	ea ea       	ldi	r30, 0xAA	; 170
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	25 e6       	ldi	r18, 0x65	; 101
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	19 c0       	rjmp	.+50     	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	49 f0       	breq	.+18     	; 0x5dc <CALLBACK_USB_GetDescriptor+0x38>
 5ca:	81 30       	cpi	r24, 0x01	; 1
 5cc:	18 f0       	brcs	.+6      	; 0x5d4 <CALLBACK_USB_GetDescriptor+0x30>
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	79 f4       	brne	.+30     	; 0x5f0 <CALLBACK_USB_GetDescriptor+0x4c>
 5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5d4:	ef e0       	ldi	r30, 0x0F	; 15
 5d6:	f1 e0       	ldi	r31, 0x01	; 1
 5d8:	84 91       	lpm	r24, Z+
 5da:	07 c0       	rjmp	.+14     	; 0x5ea <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5dc:	e3 e1       	ldi	r30, 0x13	; 19
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	84 91       	lpm	r24, Z+
 5e2:	03 c0       	rjmp	.+6      	; 0x5ea <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5e4:	e5 e2       	ldi	r30, 0x25	; 37
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	84 91       	lpm	r24, Z+
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <CALLBACK_USB_GetDescriptor+0x54>
 5f0:	e0 e0       	ldi	r30, 0x00	; 0
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 5f8:	ed 93       	st	X+, r30
 5fa:	fc 93       	st	X, r31
	return Size;
}
 5fc:	c9 01       	movw	r24, r18
 5fe:	08 95       	ret

00000600 <Endpoint_Write_Control_Stream_LE>:
 600:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 602:	40 91 1b 01 	lds	r20, 0x011B
 606:	50 91 1c 01 	lds	r21, 0x011C
 60a:	46 17       	cp	r20, r22
 60c:	57 07       	cpc	r21, r23
 60e:	18 f4       	brcc	.+6      	; 0x616 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 610:	f9 01       	movw	r30, r18
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	3d c0       	rjmp	.+122    	; 0x690 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 616:	61 15       	cp	r22, r1
 618:	71 05       	cpc	r23, r1
 61a:	11 f0       	breq	.+4      	; 0x620 <Endpoint_Write_Control_Stream_LE+0x20>
 61c:	ab 01       	movw	r20, r22
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 620:	80 91 e8 00 	lds	r24, 0x00E8
 624:	8e 77       	andi	r24, 0x7E	; 126
 626:	80 93 e8 00 	sts	0x00E8, r24
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	f0 cf       	rjmp	.-32     	; 0x610 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 630:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <Endpoint_Write_Control_Stream_LE+0x3a>
 638:	41 c0       	rjmp	.+130    	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 63a:	85 30       	cpi	r24, 0x05	; 5
 63c:	09 f4       	brne	.+2      	; 0x640 <Endpoint_Write_Control_Stream_LE+0x40>
 63e:	40 c0       	rjmp	.+128    	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 640:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 644:	83 fd       	sbrc	r24, 3
 646:	3e c0       	rjmp	.+124    	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 648:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 64c:	82 fd       	sbrc	r24, 2
 64e:	30 c0       	rjmp	.+96     	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 650:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 654:	80 ff       	sbrs	r24, 0
 656:	1c c0       	rjmp	.+56     	; 0x690 <Endpoint_Write_Control_Stream_LE+0x90>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 658:	80 91 f2 00 	lds	r24, 0x00F2
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	07 c0       	rjmp	.+14     	; 0x670 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 662:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 664:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 668:	41 50       	subi	r20, 0x01	; 1
 66a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 66c:	2f 5f       	subi	r18, 0xFF	; 255
 66e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 670:	41 15       	cp	r20, r1
 672:	51 05       	cpc	r21, r1
 674:	19 f0       	breq	.+6      	; 0x67c <Endpoint_Write_Control_Stream_LE+0x7c>
 676:	28 30       	cpi	r18, 0x08	; 8
 678:	31 05       	cpc	r19, r1
 67a:	98 f3       	brcs	.-26     	; 0x662 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	28 30       	cpi	r18, 0x08	; 8
 680:	31 05       	cpc	r19, r1
 682:	09 f4       	brne	.+2      	; 0x686 <Endpoint_Write_Control_Stream_LE+0x86>
 684:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 686:	80 91 e8 00 	lds	r24, 0x00E8
 68a:	8e 77       	andi	r24, 0x7E	; 126
 68c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 690:	41 15       	cp	r20, r1
 692:	51 05       	cpc	r21, r1
 694:	69 f6       	brne	.-102    	; 0x630 <Endpoint_Write_Control_Stream_LE+0x30>
 696:	99 23       	and	r25, r25
 698:	59 f6       	brne	.-106    	; 0x630 <Endpoint_Write_Control_Stream_LE+0x30>
 69a:	0a c0       	rjmp	.+20     	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 69c:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6a0:	88 23       	and	r24, r24
 6a2:	61 f0       	breq	.+24     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6a4:	85 30       	cpi	r24, 0x05	; 5
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6ac:	83 fd       	sbrc	r24, 3
 6ae:	0a c0       	rjmp	.+20     	; 0x6c4 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6b0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 6b4:	82 ff       	sbrs	r24, 2
 6b6:	f2 cf       	rjmp	.-28     	; 0x69c <Endpoint_Write_Control_Stream_LE+0x9c>
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	08 95       	ret
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	08 95       	ret
 6c0:	83 e0       	ldi	r24, 0x03	; 3
 6c2:	08 95       	ret
 6c4:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6c6:	08 95       	ret

000006c8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 6c8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6ca:	40 91 1b 01 	lds	r20, 0x011B
 6ce:	50 91 1c 01 	lds	r21, 0x011C
 6d2:	46 17       	cp	r20, r22
 6d4:	57 07       	cpc	r21, r23
 6d6:	18 f4       	brcc	.+6      	; 0x6de <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 6d8:	f9 01       	movw	r30, r18
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	3e c0       	rjmp	.+124    	; 0x75a <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6de:	61 15       	cp	r22, r1
 6e0:	71 05       	cpc	r23, r1
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <Endpoint_Write_Control_PStream_LE+0x20>
 6e4:	ab 01       	movw	r20, r22
 6e6:	f8 cf       	rjmp	.-16     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6e8:	80 91 e8 00 	lds	r24, 0x00E8
 6ec:	8e 77       	andi	r24, 0x7E	; 126
 6ee:	80 93 e8 00 	sts	0x00E8, r24
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	f0 cf       	rjmp	.-32     	; 0x6d8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6f8:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6fc:	88 23       	and	r24, r24
 6fe:	09 f4       	brne	.+2      	; 0x702 <Endpoint_Write_Control_PStream_LE+0x3a>
 700:	42 c0       	rjmp	.+132    	; 0x786 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 702:	85 30       	cpi	r24, 0x05	; 5
 704:	09 f4       	brne	.+2      	; 0x708 <Endpoint_Write_Control_PStream_LE+0x40>
 706:	41 c0       	rjmp	.+130    	; 0x78a <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 708:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 70c:	83 fd       	sbrc	r24, 3
 70e:	3f c0       	rjmp	.+126    	; 0x78e <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 710:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 714:	82 fd       	sbrc	r24, 2
 716:	31 c0       	rjmp	.+98     	; 0x77a <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 718:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 71c:	80 ff       	sbrs	r24, 0
 71e:	1d c0       	rjmp	.+58     	; 0x75a <Endpoint_Write_Control_PStream_LE+0x92>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 720:	80 91 f2 00 	lds	r24, 0x00F2
 724:	28 2f       	mov	r18, r24
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	08 c0       	rjmp	.+16     	; 0x73a <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 72a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 72c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 730:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 732:	41 50       	subi	r20, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 736:	2f 5f       	subi	r18, 0xFF	; 255
 738:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 73a:	41 15       	cp	r20, r1
 73c:	51 05       	cpc	r21, r1
 73e:	19 f0       	breq	.+6      	; 0x746 <Endpoint_Write_Control_PStream_LE+0x7e>
 740:	28 30       	cpi	r18, 0x08	; 8
 742:	31 05       	cpc	r19, r1
 744:	90 f3       	brcs	.-28     	; 0x72a <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	28 30       	cpi	r18, 0x08	; 8
 74a:	31 05       	cpc	r19, r1
 74c:	09 f4       	brne	.+2      	; 0x750 <Endpoint_Write_Control_PStream_LE+0x88>
 74e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 750:	80 91 e8 00 	lds	r24, 0x00E8
 754:	8e 77       	andi	r24, 0x7E	; 126
 756:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 75a:	41 15       	cp	r20, r1
 75c:	51 05       	cpc	r21, r1
 75e:	61 f6       	brne	.-104    	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x30>
 760:	99 23       	and	r25, r25
 762:	51 f6       	brne	.-108    	; 0x6f8 <Endpoint_Write_Control_PStream_LE+0x30>
 764:	0a c0       	rjmp	.+20     	; 0x77a <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 766:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 76a:	88 23       	and	r24, r24
 76c:	61 f0       	breq	.+24     	; 0x786 <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 76e:	85 30       	cpi	r24, 0x05	; 5
 770:	61 f0       	breq	.+24     	; 0x78a <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 772:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 776:	83 fd       	sbrc	r24, 3
 778:	0a c0       	rjmp	.+20     	; 0x78e <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 77a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 77e:	82 ff       	sbrs	r24, 2
 780:	f2 cf       	rjmp	.-28     	; 0x766 <Endpoint_Write_Control_PStream_LE+0x9e>
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	08 95       	ret
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	08 95       	ret
 78e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 790:	08 95       	ret

00000792 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 792:	bf 92       	push	r11
 794:	cf 92       	push	r12
 796:	df 92       	push	r13
 798:	ef 92       	push	r14
 79a:	ff 92       	push	r15
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	18 2f       	mov	r17, r24
 7a6:	09 2f       	mov	r16, r25
 7a8:	7b 01       	movw	r14, r22
 7aa:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 7ac:	ef d0       	rcall	.+478    	; 0x98c <Endpoint_WaitUntilReady>
 7ae:	b8 2e       	mov	r11, r24
 7b0:	88 23       	and	r24, r24
 7b2:	b1 f5       	brne	.+108    	; 0x820 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7b4:	81 2f       	mov	r24, r17
 7b6:	90 2f       	mov	r25, r16
 7b8:	9c 01       	movw	r18, r24
 7ba:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 7bc:	c1 14       	cp	r12, r1
 7be:	d1 04       	cpc	r13, r1
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 7c2:	f6 01       	movw	r30, r12
 7c4:	80 81       	ld	r24, Z
 7c6:	91 81       	ldd	r25, Z+1	; 0x01
 7c8:	e8 1a       	sub	r14, r24
 7ca:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 7cc:	c8 0f       	add	r28, r24
 7ce:	d9 1f       	adc	r29, r25
 7d0:	00 e0       	ldi	r16, 0x00	; 0
 7d2:	10 e0       	ldi	r17, 0x00	; 0
 7d4:	22 c0       	rjmp	.+68     	; 0x81a <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 7d6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 7da:	85 fd       	sbrc	r24, 5
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 7de:	80 91 e8 00 	lds	r24, 0x00E8
 7e2:	8b 77       	andi	r24, 0x7B	; 123
 7e4:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 7e8:	58 d3       	rcall	.+1712   	; 0xe9a <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 7ea:	c1 14       	cp	r12, r1
 7ec:	d1 04       	cpc	r13, r1
 7ee:	49 f0       	breq	.+18     	; 0x802 <Endpoint_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
 7f0:	f6 01       	movw	r30, r12
 7f2:	80 81       	ld	r24, Z
 7f4:	91 81       	ldd	r25, Z+1	; 0x01
 7f6:	80 0f       	add	r24, r16
 7f8:	91 1f       	adc	r25, r17
 7fa:	91 83       	std	Z+1, r25	; 0x01
 7fc:	80 83       	st	Z, r24
 7fe:	85 e0       	ldi	r24, 0x05	; 5
 800:	10 c0       	rjmp	.+32     	; 0x822 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 802:	c4 d0       	rcall	.+392    	; 0x98c <Endpoint_WaitUntilReady>
 804:	88 23       	and	r24, r24
 806:	49 f0       	breq	.+18     	; 0x81a <Endpoint_Read_Stream_LE+0x88>
 808:	0c c0       	rjmp	.+24     	; 0x822 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 80a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 80e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 810:	08 94       	sec
 812:	e1 08       	sbc	r14, r1
 814:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 816:	0f 5f       	subi	r16, 0xFF	; 255
 818:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 81a:	e1 14       	cp	r14, r1
 81c:	f1 04       	cpc	r15, r1
 81e:	d9 f6       	brne	.-74     	; 0x7d6 <Endpoint_Read_Stream_LE+0x44>
 820:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	ff 90       	pop	r15
 82c:	ef 90       	pop	r14
 82e:	df 90       	pop	r13
 830:	cf 90       	pop	r12
 832:	bf 90       	pop	r11
 834:	08 95       	ret

00000836 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 836:	bf 92       	push	r11
 838:	cf 92       	push	r12
 83a:	df 92       	push	r13
 83c:	ef 92       	push	r14
 83e:	ff 92       	push	r15
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	18 2f       	mov	r17, r24
 84a:	09 2f       	mov	r16, r25
 84c:	7b 01       	movw	r14, r22
 84e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 850:	9d d0       	rcall	.+314    	; 0x98c <Endpoint_WaitUntilReady>
 852:	b8 2e       	mov	r11, r24
 854:	88 23       	and	r24, r24
 856:	b1 f5       	brne	.+108    	; 0x8c4 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 858:	81 2f       	mov	r24, r17
 85a:	90 2f       	mov	r25, r16
 85c:	9c 01       	movw	r18, r24
 85e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 860:	c1 14       	cp	r12, r1
 862:	d1 04       	cpc	r13, r1
 864:	39 f0       	breq	.+14     	; 0x874 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 866:	f6 01       	movw	r30, r12
 868:	80 81       	ld	r24, Z
 86a:	91 81       	ldd	r25, Z+1	; 0x01
 86c:	e8 1a       	sub	r14, r24
 86e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 870:	c8 0f       	add	r28, r24
 872:	d9 1f       	adc	r29, r25
 874:	00 e0       	ldi	r16, 0x00	; 0
 876:	10 e0       	ldi	r17, 0x00	; 0
 878:	22 c0       	rjmp	.+68     	; 0x8be <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 87a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 87e:	85 fd       	sbrc	r24, 5
 880:	16 c0       	rjmp	.+44     	; 0x8ae <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 882:	80 91 e8 00 	lds	r24, 0x00E8
 886:	8e 77       	andi	r24, 0x7E	; 126
 888:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 88c:	06 d3       	rcall	.+1548   	; 0xe9a <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 88e:	c1 14       	cp	r12, r1
 890:	d1 04       	cpc	r13, r1
 892:	49 f0       	breq	.+18     	; 0x8a6 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
 894:	f6 01       	movw	r30, r12
 896:	80 81       	ld	r24, Z
 898:	91 81       	ldd	r25, Z+1	; 0x01
 89a:	80 0f       	add	r24, r16
 89c:	91 1f       	adc	r25, r17
 89e:	91 83       	std	Z+1, r25	; 0x01
 8a0:	80 83       	st	Z, r24
 8a2:	85 e0       	ldi	r24, 0x05	; 5
 8a4:	10 c0       	rjmp	.+32     	; 0x8c6 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 8a6:	72 d0       	rcall	.+228    	; 0x98c <Endpoint_WaitUntilReady>
 8a8:	88 23       	and	r24, r24
 8aa:	49 f0       	breq	.+18     	; 0x8be <Endpoint_Write_Stream_LE+0x88>
 8ac:	0c c0       	rjmp	.+24     	; 0x8c6 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 8ae:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 8b0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 8b4:	08 94       	sec
 8b6:	e1 08       	sbc	r14, r1
 8b8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 8ba:	0f 5f       	subi	r16, 0xFF	; 255
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 8be:	e1 14       	cp	r14, r1
 8c0:	f1 04       	cpc	r15, r1
 8c2:	d9 f6       	brne	.-74     	; 0x87a <Endpoint_Write_Stream_LE+0x44>
 8c4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	08 95       	ret

000008da <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 8da:	38 2f       	mov	r19, r24
 8dc:	28 2f       	mov	r18, r24
 8de:	2e c0       	rjmp	.+92     	; 0x93c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8e0:	82 2f       	mov	r24, r18
 8e2:	8f 70       	andi	r24, 0x0F	; 15
 8e4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 8e8:	23 17       	cp	r18, r19
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
 8ec:	76 2f       	mov	r23, r22
 8ee:	94 2f       	mov	r25, r20
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 8f4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 8f8:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 8fc:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 900:	91 ff       	sbrs	r25, 1
 902:	1b c0       	rjmp	.+54     	; 0x93a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 904:	80 91 eb 00 	lds	r24, 0x00EB
 908:	8e 7f       	andi	r24, 0xFE	; 254
 90a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 90e:	80 91 ed 00 	lds	r24, 0x00ED
 912:	8d 7f       	andi	r24, 0xFD	; 253
 914:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 918:	80 91 eb 00 	lds	r24, 0x00EB
 91c:	81 60       	ori	r24, 0x01	; 1
 91e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 922:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 926:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 92a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 92e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
 932:	87 fd       	sbrc	r24, 7
 934:	02 c0       	rjmp	.+4      	; 0x93a <Endpoint_ConfigureEndpoint_Prv+0x60>
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 93a:	2f 5f       	subi	r18, 0xFF	; 255
 93c:	25 30       	cpi	r18, 0x05	; 5
 93e:	80 f2       	brcs	.-96     	; 0x8e0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 940:	3f 70       	andi	r19, 0x0F	; 15
 942:	30 93 e9 00 	sts	0x00E9, r19
 946:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 948:	08 95       	ret

0000094a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 94a:	80 91 15 01 	lds	r24, 0x0115
 94e:	88 23       	and	r24, r24
 950:	9c f4       	brge	.+38     	; 0x978 <Endpoint_ClearStatusStage+0x2e>
 952:	04 c0       	rjmp	.+8      	; 0x95c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 954:	80 91 14 01 	lds	r24, 0x0114
 958:	88 23       	and	r24, r24
 95a:	b9 f0       	breq	.+46     	; 0x98a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 95c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 960:	82 ff       	sbrs	r24, 2
 962:	f8 cf       	rjmp	.-16     	; 0x954 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 964:	80 91 e8 00 	lds	r24, 0x00E8
 968:	8b 77       	andi	r24, 0x7B	; 123
 96a:	80 93 e8 00 	sts	0x00E8, r24
 96e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 970:	80 91 14 01 	lds	r24, 0x0114
 974:	88 23       	and	r24, r24
 976:	49 f0       	breq	.+18     	; 0x98a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 978:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 97c:	80 ff       	sbrs	r24, 0
 97e:	f8 cf       	rjmp	.-16     	; 0x970 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 980:	80 91 e8 00 	lds	r24, 0x00E8
 984:	8e 77       	andi	r24, 0x7E	; 126
 986:	80 93 e8 00 	sts	0x00E8, r24
 98a:	08 95       	ret

0000098c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 98c:	40 91 e4 00 	lds	r20, 0x00E4
 990:	50 91 e5 00 	lds	r21, 0x00E5
 994:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 996:	80 91 ec 00 	lds	r24, 0x00EC
 99a:	80 ff       	sbrs	r24, 0
 99c:	24 c0       	rjmp	.+72     	; 0x9e6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 99e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 9a2:	80 fd       	sbrc	r24, 0
 9a4:	1e c0       	rjmp	.+60     	; 0x9e2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9a6:	80 91 14 01 	lds	r24, 0x0114

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9aa:	88 23       	and	r24, r24
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <Endpoint_WaitUntilReady+0x26>
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9b2:	85 30       	cpi	r24, 0x05	; 5
 9b4:	11 f4       	brne	.+4      	; 0x9ba <Endpoint_WaitUntilReady+0x2e>
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9ba:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 9be:	85 ff       	sbrs	r24, 5
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <Endpoint_WaitUntilReady+0x3a>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	08 95       	ret
 9c6:	80 91 e4 00 	lds	r24, 0x00E4
 9ca:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 9ce:	84 17       	cp	r24, r20
 9d0:	95 07       	cpc	r25, r21
 9d2:	09 f3       	breq	.-62     	; 0x996 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 9d4:	22 23       	and	r18, r18
 9d6:	11 f4       	brne	.+4      	; 0x9dc <Endpoint_WaitUntilReady+0x50>
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	08 95       	ret
 9dc:	21 50       	subi	r18, 0x01	; 1
 9de:	ac 01       	movw	r20, r24
 9e0:	da cf       	rjmp	.-76     	; 0x996 <Endpoint_WaitUntilReady+0xa>
 9e2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 9e4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9e6:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 9ea:	82 ff       	sbrs	r24, 2
 9ec:	dc cf       	rjmp	.-72     	; 0x9a6 <Endpoint_WaitUntilReady+0x1a>
 9ee:	f9 cf       	rjmp	.-14     	; 0x9e2 <Endpoint_WaitUntilReady+0x56>

000009f0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 9f0:	41 d0       	rcall	.+130    	; 0xa74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 9f2:	43 d0       	rcall	.+134    	; 0xa7a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9f4:	80 91 d8 00 	lds	r24, 0x00D8
 9f8:	8f 77       	andi	r24, 0x7F	; 127
 9fa:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 9fe:	80 91 d8 00 	lds	r24, 0x00D8
 a02:	80 68       	ori	r24, 0x80	; 128
 a04:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a08:	80 91 d8 00 	lds	r24, 0x00D8
 a0c:	8f 7d       	andi	r24, 0xDF	; 223
 a0e:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a12:	84 e0       	ldi	r24, 0x04	; 4
 a14:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a16:	86 e0       	ldi	r24, 0x06	; 6
 a18:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a1a:	09 b4       	in	r0, 0x29	; 41
 a1c:	00 fe       	sbrs	r0, 0
 a1e:	fd cf       	rjmp	.-6      	; 0xa1a <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 a20:	10 92 14 01 	sts	0x0114, r1
	USB_Device_ConfigurationNumber  = 0;
 a24:	10 92 10 01 	sts	0x0110, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 a28:	10 92 12 01 	sts	0x0112, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 a2c:	10 92 11 01 	sts	0x0111, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	42 e0       	ldi	r20, 0x02	; 2
 a36:	51 df       	rcall	.-350    	; 0x8da <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a38:	80 91 e1 00 	lds	r24, 0x00E1
 a3c:	8e 7f       	andi	r24, 0xFE	; 254
 a3e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a42:	80 91 e2 00 	lds	r24, 0x00E2
 a46:	81 60       	ori	r24, 0x01	; 1
 a48:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 a4c:	80 91 e2 00 	lds	r24, 0x00E2
 a50:	88 60       	ori	r24, 0x08	; 8
 a52:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 a56:	80 91 e0 00 	lds	r24, 0x00E0
 a5a:	8e 7f       	andi	r24, 0xFE	; 254
 a5c:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 a60:	08 95       	ret

00000a62 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 a62:	e3 e6       	ldi	r30, 0x63	; 99
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	8e 7f       	andi	r24, 0xFE	; 254
 a6a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	80 93 13 01 	sts	0x0113, r24

	USB_ResetInterface();
}
 a72:	be cf       	rjmp	.-132    	; 0x9f0 <USB_ResetInterface>

00000a74 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a74:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 a78:	08 95       	ret

00000a7a <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a7a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 a7e:	08 95       	ret

00000a80 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a80:	1f 92       	push	r1
 a82:	0f 92       	push	r0
 a84:	0f b6       	in	r0, 0x3f	; 63
 a86:	0f 92       	push	r0
 a88:	11 24       	eor	r1, r1
 a8a:	2f 93       	push	r18
 a8c:	3f 93       	push	r19
 a8e:	4f 93       	push	r20
 a90:	5f 93       	push	r21
 a92:	6f 93       	push	r22
 a94:	7f 93       	push	r23
 a96:	8f 93       	push	r24
 a98:	9f 93       	push	r25
 a9a:	af 93       	push	r26
 a9c:	bf 93       	push	r27
 a9e:	ef 93       	push	r30
 aa0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 aa2:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 aa6:	82 ff       	sbrs	r24, 2
 aa8:	0a c0       	rjmp	.+20     	; 0xabe <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 aaa:	80 91 e2 00 	lds	r24, 0x00E2
 aae:	82 ff       	sbrs	r24, 2
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 ab2:	80 91 e1 00 	lds	r24, 0x00E1
 ab6:	8b 7f       	andi	r24, 0xFB	; 251
 ab8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 abc:	ed d1       	rcall	.+986    	; 0xe98 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 abe:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 ac2:	80 ff       	sbrs	r24, 0
 ac4:	17 c0       	rjmp	.+46     	; 0xaf4 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 ac6:	80 91 e2 00 	lds	r24, 0x00E2
 aca:	80 ff       	sbrs	r24, 0
 acc:	13 c0       	rjmp	.+38     	; 0xaf4 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ace:	80 91 e2 00 	lds	r24, 0x00E2
 ad2:	8e 7f       	andi	r24, 0xFE	; 254
 ad4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 ad8:	80 91 e2 00 	lds	r24, 0x00E2
 adc:	80 61       	ori	r24, 0x10	; 16
 ade:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 ae2:	80 91 d8 00 	lds	r24, 0x00D8
 ae6:	80 62       	ori	r24, 0x20	; 32
 ae8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 aec:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 aee:	10 92 14 01 	sts	0x0114, r1
		EVENT_USB_Device_Disconnect();
 af2:	3e db       	rcall	.-2436   	; 0x170 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 af4:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 af8:	84 ff       	sbrs	r24, 4
 afa:	2f c0       	rjmp	.+94     	; 0xb5a <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 afc:	80 91 e2 00 	lds	r24, 0x00E2
 b00:	84 ff       	sbrs	r24, 4
 b02:	2b c0       	rjmp	.+86     	; 0xb5a <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 b04:	84 e0       	ldi	r24, 0x04	; 4
 b06:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b08:	86 e0       	ldi	r24, 0x06	; 6
 b0a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b0c:	09 b4       	in	r0, 0x29	; 41
 b0e:	00 fe       	sbrs	r0, 0
 b10:	fd cf       	rjmp	.-6      	; 0xb0c <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b12:	80 91 d8 00 	lds	r24, 0x00D8
 b16:	8f 7d       	andi	r24, 0xDF	; 223
 b18:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 b1c:	80 91 e1 00 	lds	r24, 0x00E1
 b20:	8f 7e       	andi	r24, 0xEF	; 239
 b22:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b26:	80 91 e2 00 	lds	r24, 0x00E2
 b2a:	8f 7e       	andi	r24, 0xEF	; 239
 b2c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b30:	80 91 e2 00 	lds	r24, 0x00E2
 b34:	81 60       	ori	r24, 0x01	; 1
 b36:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b3a:	80 91 10 01 	lds	r24, 0x0110
 b3e:	88 23       	and	r24, r24
 b40:	11 f0       	breq	.+4      	; 0xb46 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 b42:	84 e0       	ldi	r24, 0x04	; 4
 b44:	07 c0       	rjmp	.+14     	; 0xb54 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b46:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b4a:	87 fd       	sbrc	r24, 7
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <__vector_11+0xd2>
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	01 c0       	rjmp	.+2      	; 0xb54 <__vector_11+0xd4>
 b52:	83 e0       	ldi	r24, 0x03	; 3
 b54:	80 93 14 01 	sts	0x0114, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 b58:	06 db       	rcall	.-2548   	; 0x166 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b5a:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b5e:	83 ff       	sbrs	r24, 3
 b60:	22 c0       	rjmp	.+68     	; 0xba6 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b62:	80 91 e2 00 	lds	r24, 0x00E2
 b66:	83 ff       	sbrs	r24, 3
 b68:	1e c0       	rjmp	.+60     	; 0xba6 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b6a:	80 91 e1 00 	lds	r24, 0x00E1
 b6e:	87 7f       	andi	r24, 0xF7	; 247
 b70:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b74:	82 e0       	ldi	r24, 0x02	; 2
 b76:	80 93 14 01 	sts	0x0114, r24
		USB_Device_ConfigurationNumber = 0;
 b7a:	10 92 10 01 	sts	0x0110, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b7e:	80 91 e1 00 	lds	r24, 0x00E1
 b82:	8e 7f       	andi	r24, 0xFE	; 254
 b84:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b88:	80 91 e2 00 	lds	r24, 0x00E2
 b8c:	8e 7f       	andi	r24, 0xFE	; 254
 b8e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b92:	80 91 e2 00 	lds	r24, 0x00E2
 b96:	80 61       	ori	r24, 0x10	; 16
 b98:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	60 e0       	ldi	r22, 0x00	; 0
 ba0:	42 e0       	ldi	r20, 0x02	; 2
 ba2:	9b de       	rcall	.-714    	; 0x8da <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 ba4:	79 d1       	rcall	.+754    	; 0xe98 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 ba6:	ff 91       	pop	r31
 ba8:	ef 91       	pop	r30
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	9f 91       	pop	r25
 bb0:	8f 91       	pop	r24
 bb2:	7f 91       	pop	r23
 bb4:	6f 91       	pop	r22
 bb6:	5f 91       	pop	r21
 bb8:	4f 91       	pop	r20
 bba:	3f 91       	pop	r19
 bbc:	2f 91       	pop	r18
 bbe:	0f 90       	pop	r0
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	0f 90       	pop	r0
 bc4:	1f 90       	pop	r1
 bc6:	18 95       	reti

00000bc8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 bc8:	1f 93       	push	r17
 bca:	df 93       	push	r29
 bcc:	cf 93       	push	r28
 bce:	cd b7       	in	r28, 0x3d	; 61
 bd0:	de b7       	in	r29, 0x3e	; 62
 bd2:	ac 97       	sbiw	r28, 0x2c	; 44
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	e5 e1       	ldi	r30, 0x15	; 21
 be0:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 be2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 be6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 be8:	21 e0       	ldi	r18, 0x01	; 1
 bea:	ed 31       	cpi	r30, 0x1D	; 29
 bec:	f2 07       	cpc	r31, r18
 bee:	c9 f7       	brne	.-14     	; 0xbe2 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 bf0:	53 d1       	rcall	.+678    	; 0xe98 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bf2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 bf6:	83 ff       	sbrs	r24, 3
 bf8:	37 c1       	rjmp	.+622    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 bfa:	80 91 15 01 	lds	r24, 0x0115

		switch (USB_ControlRequest.bRequest)
 bfe:	30 91 16 01 	lds	r19, 0x0116
 c02:	35 30       	cpi	r19, 0x05	; 5
 c04:	09 f4       	brne	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0x40>
 c06:	87 c0       	rjmp	.+270    	; 0xd16 <USB_Device_ProcessControlRequest+0x14e>
 c08:	36 30       	cpi	r19, 0x06	; 6
 c0a:	40 f4       	brcc	.+16     	; 0xc1c <USB_Device_ProcessControlRequest+0x54>
 c0c:	31 30       	cpi	r19, 0x01	; 1
 c0e:	c9 f1       	breq	.+114    	; 0xc82 <USB_Device_ProcessControlRequest+0xba>
 c10:	31 30       	cpi	r19, 0x01	; 1
 c12:	70 f0       	brcs	.+28     	; 0xc30 <USB_Device_ProcessControlRequest+0x68>
 c14:	33 30       	cpi	r19, 0x03	; 3
 c16:	09 f0       	breq	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0x52>
 c18:	27 c1       	rjmp	.+590    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
 c1a:	33 c0       	rjmp	.+102    	; 0xc82 <USB_Device_ProcessControlRequest+0xba>
 c1c:	38 30       	cpi	r19, 0x08	; 8
 c1e:	09 f4       	brne	.+2      	; 0xc22 <USB_Device_ProcessControlRequest+0x5a>
 c20:	f5 c0       	rjmp	.+490    	; 0xe0c <USB_Device_ProcessControlRequest+0x244>
 c22:	39 30       	cpi	r19, 0x09	; 9
 c24:	09 f4       	brne	.+2      	; 0xc28 <USB_Device_ProcessControlRequest+0x60>
 c26:	04 c1       	rjmp	.+520    	; 0xe30 <USB_Device_ProcessControlRequest+0x268>
 c28:	36 30       	cpi	r19, 0x06	; 6
 c2a:	09 f0       	breq	.+2      	; 0xc2e <USB_Device_ProcessControlRequest+0x66>
 c2c:	1d c1       	rjmp	.+570    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
 c2e:	96 c0       	rjmp	.+300    	; 0xd5c <USB_Device_ProcessControlRequest+0x194>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c30:	80 38       	cpi	r24, 0x80	; 128
 c32:	21 f0       	breq	.+8      	; 0xc3c <USB_Device_ProcessControlRequest+0x74>
 c34:	82 38       	cpi	r24, 0x82	; 130
 c36:	09 f0       	breq	.+2      	; 0xc3a <USB_Device_ProcessControlRequest+0x72>
 c38:	17 c1       	rjmp	.+558    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <USB_Device_ProcessControlRequest+0x84>
 c3c:	90 91 11 01 	lds	r25, 0x0111
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c40:	80 91 12 01 	lds	r24, 0x0112
 c44:	88 23       	and	r24, r24
 c46:	99 f0       	breq	.+38     	; 0xc6e <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c48:	92 60       	ori	r25, 0x02	; 2
 c4a:	11 c0       	rjmp	.+34     	; 0xc6e <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c4c:	80 91 19 01 	lds	r24, 0x0119
 c50:	8f 70       	andi	r24, 0x0F	; 15
 c52:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c56:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	25 e0       	ldi	r18, 0x05	; 5
 c5e:	96 95       	lsr	r25
 c60:	87 95       	ror	r24
 c62:	2a 95       	dec	r18
 c64:	e1 f7       	brne	.-8      	; 0xc5e <USB_Device_ProcessControlRequest+0x96>
 c66:	98 2f       	mov	r25, r24
 c68:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c6e:	80 91 e8 00 	lds	r24, 0x00E8
 c72:	87 7f       	andi	r24, 0xF7	; 247
 c74:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c78:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 c7c:	10 92 f1 00 	sts	0x00F1, r1
 c80:	d0 c0       	rjmp	.+416    	; 0xe22 <USB_Device_ProcessControlRequest+0x25a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c82:	88 23       	and	r24, r24
 c84:	19 f0       	breq	.+6      	; 0xc8c <USB_Device_ProcessControlRequest+0xc4>
 c86:	82 30       	cpi	r24, 0x02	; 2
 c88:	09 f0       	breq	.+2      	; 0xc8c <USB_Device_ProcessControlRequest+0xc4>
 c8a:	ee c0       	rjmp	.+476    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	8f 71       	andi	r24, 0x1F	; 31
 c90:	90 70       	andi	r25, 0x00	; 0
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	21 f0       	breq	.+8      	; 0xc9e <USB_Device_ProcessControlRequest+0xd6>
 c96:	02 97       	sbiw	r24, 0x02	; 2
 c98:	09 f0       	breq	.+2      	; 0xc9c <USB_Device_ProcessControlRequest+0xd4>
 c9a:	e6 c0       	rjmp	.+460    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
 c9c:	0c c0       	rjmp	.+24     	; 0xcb6 <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c9e:	80 91 17 01 	lds	r24, 0x0117
 ca2:	81 30       	cpi	r24, 0x01	; 1
 ca4:	09 f0       	breq	.+2      	; 0xca8 <USB_Device_ProcessControlRequest+0xe0>
 ca6:	e0 c0       	rjmp	.+448    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ca8:	10 92 12 01 	sts	0x0112, r1
 cac:	33 30       	cpi	r19, 0x03	; 3
 cae:	69 f5       	brne	.+90     	; 0xd0a <USB_Device_ProcessControlRequest+0x142>
 cb0:	80 93 12 01 	sts	0x0112, r24
 cb4:	2a c0       	rjmp	.+84     	; 0xd0a <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 cb6:	80 91 17 01 	lds	r24, 0x0117
 cba:	88 23       	and	r24, r24
 cbc:	31 f5       	brne	.+76     	; 0xd0a <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cbe:	20 91 19 01 	lds	r18, 0x0119
 cc2:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 cc4:	09 f4       	brne	.+2      	; 0xcc8 <USB_Device_ProcessControlRequest+0x100>
 cc6:	d0 c0       	rjmp	.+416    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 ccc:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 cd0:	80 ff       	sbrs	r24, 0
 cd2:	1b c0       	rjmp	.+54     	; 0xd0a <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 cd4:	33 30       	cpi	r19, 0x03	; 3
 cd6:	21 f4       	brne	.+8      	; 0xce0 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 cd8:	80 91 eb 00 	lds	r24, 0x00EB
 cdc:	80 62       	ori	r24, 0x20	; 32
 cde:	13 c0       	rjmp	.+38     	; 0xd06 <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ce0:	80 91 eb 00 	lds	r24, 0x00EB
 ce4:	80 61       	ori	r24, 0x10	; 16
 ce6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <USB_Device_ProcessControlRequest+0x12c>
 cf0:	88 0f       	add	r24, r24
 cf2:	99 1f       	adc	r25, r25
 cf4:	2a 95       	dec	r18
 cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <USB_Device_ProcessControlRequest+0x128>
 cf8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 cfc:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d00:	80 91 eb 00 	lds	r24, 0x00EB
 d04:	88 60       	ori	r24, 0x08	; 8
 d06:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d0a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d0e:	80 91 e8 00 	lds	r24, 0x00E8
 d12:	87 7f       	andi	r24, 0xF7	; 247
 d14:	89 c0       	rjmp	.+274    	; 0xe28 <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d16:	88 23       	and	r24, r24
 d18:	09 f0       	breq	.+2      	; 0xd1c <USB_Device_ProcessControlRequest+0x154>
 d1a:	a6 c0       	rjmp	.+332    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 d1c:	10 91 17 01 	lds	r17, 0x0117
 d20:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d22:	80 91 e3 00 	lds	r24, 0x00E3
 d26:	80 78       	andi	r24, 0x80	; 128
 d28:	81 2b       	or	r24, r17
 d2a:	80 93 e3 00 	sts	0x00E3, r24
 d2e:	80 91 e8 00 	lds	r24, 0x00E8
 d32:	87 7f       	andi	r24, 0xF7	; 247
 d34:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d38:	08 de       	rcall	.-1008   	; 0x94a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d3a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 d3e:	80 ff       	sbrs	r24, 0
 d40:	fc cf       	rjmp	.-8      	; 0xd3a <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d42:	80 91 e3 00 	lds	r24, 0x00E3
 d46:	80 68       	ori	r24, 0x80	; 128
 d48:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d4c:	11 23       	and	r17, r17
 d4e:	11 f4       	brne	.+4      	; 0xd54 <USB_Device_ProcessControlRequest+0x18c>
 d50:	82 e0       	ldi	r24, 0x02	; 2
 d52:	01 c0       	rjmp	.+2      	; 0xd56 <USB_Device_ProcessControlRequest+0x18e>
 d54:	83 e0       	ldi	r24, 0x03	; 3
 d56:	80 93 14 01 	sts	0x0114, r24
 d5a:	86 c0       	rjmp	.+268    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d5c:	80 58       	subi	r24, 0x80	; 128
 d5e:	82 30       	cpi	r24, 0x02	; 2
 d60:	08 f0       	brcs	.+2      	; 0xd64 <USB_Device_ProcessControlRequest+0x19c>
 d62:	82 c0       	rjmp	.+260    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 d64:	80 91 17 01 	lds	r24, 0x0117
 d68:	90 91 18 01 	lds	r25, 0x0118
 d6c:	23 e0       	ldi	r18, 0x03	; 3
 d6e:	8c 3d       	cpi	r24, 0xDC	; 220
 d70:	92 07       	cpc	r25, r18
 d72:	09 f0       	breq	.+2      	; 0xd76 <USB_Device_ProcessControlRequest+0x1ae>
 d74:	33 c0       	rjmp	.+102    	; 0xddc <USB_Device_ProcessControlRequest+0x214>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d76:	83 e0       	ldi	r24, 0x03	; 3
 d78:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d7a:	8a e2       	ldi	r24, 0x2A	; 42
 d7c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d7e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d80:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d82:	de 01       	movw	r26, r28
 d84:	15 96       	adiw	r26, 0x05	; 5
 d86:	6e e0       	ldi	r22, 0x0E	; 14
 d88:	40 e0       	ldi	r20, 0x00	; 0
 d8a:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d8c:	11 e2       	ldi	r17, 0x21	; 33
 d8e:	e6 2f       	mov	r30, r22
 d90:	f0 e0       	ldi	r31, 0x00	; 0
 d92:	10 93 57 00 	sts	0x0057, r17
 d96:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 d98:	40 ff       	sbrs	r20, 0
 d9a:	03 c0       	rjmp	.+6      	; 0xda2 <USB_Device_ProcessControlRequest+0x1da>
					{
						SerialByte >>= 4;
 d9c:	82 95       	swap	r24
 d9e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 da0:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 da2:	8f 70       	andi	r24, 0x0F	; 15
 da4:	28 2f       	mov	r18, r24
 da6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 da8:	8a 30       	cpi	r24, 0x0A	; 10
 daa:	18 f0       	brcs	.+6      	; 0xdb2 <USB_Device_ProcessControlRequest+0x1ea>
 dac:	c9 01       	movw	r24, r18
 dae:	c7 96       	adiw	r24, 0x37	; 55
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <USB_Device_ProcessControlRequest+0x1ee>
 db2:	c9 01       	movw	r24, r18
 db4:	c0 96       	adiw	r24, 0x30	; 48
 db6:	8d 93       	st	X+, r24
 db8:	9d 93       	st	X+, r25
 dba:	4f 5f       	subi	r20, 0xFF	; 255
 dbc:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 dbe:	44 31       	cpi	r20, 0x14	; 20
 dc0:	51 05       	cpc	r21, r1
 dc2:	29 f7       	brne	.-54     	; 0xd8e <USB_Device_ProcessControlRequest+0x1c6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 dc4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc6:	80 91 e8 00 	lds	r24, 0x00E8
 dca:	87 7f       	andi	r24, 0xF7	; 247
 dcc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 dd0:	ce 01       	movw	r24, r28
 dd2:	03 96       	adiw	r24, 0x03	; 3
 dd4:	6a e2       	ldi	r22, 0x2A	; 42
 dd6:	70 e0       	ldi	r23, 0x00	; 0
 dd8:	13 dc       	rcall	.-2010   	; 0x600 <Endpoint_Write_Control_Stream_LE>
 dda:	12 c0       	rjmp	.+36     	; 0xe00 <USB_Device_ProcessControlRequest+0x238>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ddc:	60 91 19 01 	lds	r22, 0x0119
 de0:	ae 01       	movw	r20, r28
 de2:	4f 5f       	subi	r20, 0xFF	; 255
 de4:	5f 4f       	sbci	r21, 0xFF	; 255
 de6:	de db       	rcall	.-2116   	; 0x5a4 <CALLBACK_USB_GetDescriptor>
 de8:	bc 01       	movw	r22, r24
 dea:	00 97       	sbiw	r24, 0x00	; 0
 dec:	09 f4       	brne	.+2      	; 0xdf0 <USB_Device_ProcessControlRequest+0x228>
 dee:	3c c0       	rjmp	.+120    	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
 df0:	80 91 e8 00 	lds	r24, 0x00E8
 df4:	87 7f       	andi	r24, 0xF7	; 247
 df6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 dfa:	89 81       	ldd	r24, Y+1	; 0x01
 dfc:	9a 81       	ldd	r25, Y+2	; 0x02
 dfe:	64 dc       	rcall	.-1848   	; 0x6c8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e00:	80 91 e8 00 	lds	r24, 0x00E8
 e04:	8b 77       	andi	r24, 0x7B	; 123
 e06:	80 93 e8 00 	sts	0x00E8, r24
 e0a:	2e c0       	rjmp	.+92     	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e0c:	80 38       	cpi	r24, 0x80	; 128
 e0e:	61 f5       	brne	.+88     	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e10:	80 91 e8 00 	lds	r24, 0x00E8
 e14:	87 7f       	andi	r24, 0xF7	; 247
 e16:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e1a:	80 91 10 01 	lds	r24, 0x0110
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e1e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e22:	80 91 e8 00 	lds	r24, 0x00E8
 e26:	8e 77       	andi	r24, 0x7E	; 126
 e28:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 e2c:	8e dd       	rcall	.-1252   	; 0x94a <Endpoint_ClearStatusStage>
 e2e:	1c c0       	rjmp	.+56     	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e30:	88 23       	and	r24, r24
 e32:	d1 f4       	brne	.+52     	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e34:	90 91 17 01 	lds	r25, 0x0117
 e38:	92 30       	cpi	r25, 0x02	; 2
 e3a:	b0 f4       	brcc	.+44     	; 0xe68 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e3c:	80 91 e8 00 	lds	r24, 0x00E8
 e40:	87 7f       	andi	r24, 0xF7	; 247
 e42:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e46:	90 93 10 01 	sts	0x0110, r25

	Endpoint_ClearStatusStage();
 e4a:	7f dd       	rcall	.-1282   	; 0x94a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 e4c:	80 91 10 01 	lds	r24, 0x0110
 e50:	88 23       	and	r24, r24
 e52:	31 f4       	brne	.+12     	; 0xe60 <USB_Device_ProcessControlRequest+0x298>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e54:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e58:	87 fd       	sbrc	r24, 7
 e5a:	02 c0       	rjmp	.+4      	; 0xe60 <USB_Device_ProcessControlRequest+0x298>
 e5c:	81 e0       	ldi	r24, 0x01	; 1
 e5e:	01 c0       	rjmp	.+2      	; 0xe62 <USB_Device_ProcessControlRequest+0x29a>
 e60:	84 e0       	ldi	r24, 0x04	; 4
 e62:	80 93 14 01 	sts	0x0114, r24

	EVENT_USB_Device_ConfigurationChanged();
 e66:	31 db       	rcall	.-2462   	; 0x4ca <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e68:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e6c:	83 ff       	sbrs	r24, 3
 e6e:	0a c0       	rjmp	.+20     	; 0xe84 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e70:	80 91 e8 00 	lds	r24, 0x00E8
 e74:	87 7f       	andi	r24, 0xF7	; 247
 e76:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e7a:	80 91 eb 00 	lds	r24, 0x00EB
 e7e:	80 62       	ori	r24, 0x20	; 32
 e80:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e84:	ac 96       	adiw	r28, 0x2c	; 44
 e86:	0f b6       	in	r0, 0x3f	; 63
 e88:	f8 94       	cli
 e8a:	de bf       	out	0x3e, r29	; 62
 e8c:	0f be       	out	0x3f, r0	; 63
 e8e:	cd bf       	out	0x3d, r28	; 61
 e90:	cf 91       	pop	r28
 e92:	df 91       	pop	r29
 e94:	1f 91       	pop	r17
 e96:	08 95       	ret

00000e98 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 e98:	08 95       	ret

00000e9a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e9a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e9c:	80 91 14 01 	lds	r24, 0x0114
 ea0:	88 23       	and	r24, r24
 ea2:	71 f0       	breq	.+28     	; 0xec0 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 ea4:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 ea8:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 eac:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 eb0:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 eb4:	83 ff       	sbrs	r24, 3
 eb6:	01 c0       	rjmp	.+2      	; 0xeba <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
 eb8:	87 de       	rcall	.-754    	; 0xbc8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 eba:	1f 70       	andi	r17, 0x0F	; 15
 ebc:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 ec0:	1f 91       	pop	r17
 ec2:	08 95       	ret

00000ec4 <_exit>:
 ec4:	f8 94       	cli

00000ec6 <__stop_program>:
 ec6:	ff cf       	rjmp	.-2      	; 0xec6 <__stop_program>
